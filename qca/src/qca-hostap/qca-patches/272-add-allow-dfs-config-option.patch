--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -5086,6 +5086,7 @@ static const struct global_parse_data gl
 	{ INT_RANGE(disable_btm, 0, 1), CFG_CHANGED_DISABLE_BTM },
 	{ INT_RANGE(extended_key_id, 0, 1), 0 },
 #endif /* CONFIG_WNM */
+    { INT_RANGE(disallow_dfs, 0, 1), 0 },
 };
 
 #undef FUNC
--- a/wpa_supplicant/config.h
+++ b/wpa_supplicant/config.h
@@ -1573,6 +1573,11 @@ struct wpa_config {
 	 */
 	int disable_btm;
 
+    /**
+     * disallow_dfs - disallow connection on dfs channel(s)
+     */
+    int disallow_dfs;
+
 	/**
 	 * extended_key_id - Extended Key ID support
 	 *
--- a/wpa_supplicant/config_file.c
+++ b/wpa_supplicant/config_file.c
@@ -1649,6 +1649,8 @@ static void wpa_config_write_global(FILE
 			config->p2p_interface_random_mac_addr);
 	if (config->disable_btm)
 		fprintf(f, "disable_btm=1\n");
+    if (config->disallow_dfs)
+        fprintf(f, "disallow_dfs=%d\n", config->disallow_dfs);
 	if (config->extended_key_id != DEFAULT_EXTENDED_KEY_ID)
 		fprintf(f, "extended_key_id=%d\n",
 			config->extended_key_id);
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -805,6 +805,37 @@ static int freq_allowed(int *freqs, int
 	return 0;
 }
 
+static int dfs_freq_allowed(struct wpa_supplicant *wpa_s, int freq)
+{
+    struct hostapd_channel_data * channel = NULL;
+    size_t i;
+    int j;
+
+    if (!wpa_s->conf->disallow_dfs)
+        return 1;
+
+    for (i = 0; i < wpa_s->hw.num_modes; i++) {
+         const struct hostapd_hw_modes *mode = &wpa_s->hw.modes[i];
+         if (mode->mode != HOSTAPD_MODE_IEEE80211A)
+             continue;
+         for (j = 0; j < mode->num_channels; j++) {
+             struct hostapd_channel_data *chan;
+             chan = &mode->channels[j];
+             if (chan->freq == freq) {
+                 channel = chan;
+                 break;
+             }
+         }
+    }
+
+    if (channel == NULL)
+        return 1;
+
+    if (channel->flag & HOSTAPD_CHAN_RADAR)
+        return 0;
+
+    return 1;
+}
 
 static int rate_match(struct wpa_supplicant *wpa_s, struct wpa_ssid *ssid,
 		      struct wpa_bss *bss, int debug_print)
@@ -1303,6 +1334,12 @@ static bool wpa_scan_res_ok(struct wpa_s
 				"   skip - frequency not allowed");
 		return false;
 	}
+    if (!dfs_freq_allowed(wpa_s, bss->freq)) {
+        if (debug_print)
+            wpa_dbg(wpa_s, MSG_DEBUG,
+                "   skip - dfs frequency not allowed");
+        return false; 
+    }
 
 #ifdef CONFIG_MESH
 	if (ssid->mode == WPAS_MODE_MESH && ssid->frequency > 0 &&
