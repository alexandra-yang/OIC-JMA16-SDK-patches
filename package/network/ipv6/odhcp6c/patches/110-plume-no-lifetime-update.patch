Index: odhcp6c-2016-02-08/src/odhcp6c.c
===================================================================
--- odhcp6c-2016-02-08.orig/src/odhcp6c.c
+++ odhcp6c-2016-02-08/src/odhcp6c.c
@@ -51,6 +51,7 @@ static time_t last_update = 0;
 static unsigned int min_update_interval = DEFAULT_MIN_UPDATE_INTERVAL;
 static unsigned int script_sync_delay = 10;
 static unsigned int script_accu_delay = 1;
+static bool update_lifetimes = true;
 
 int main(_unused int argc, char* const argv[])
 {
@@ -75,7 +76,7 @@ int main(_unused int argc, char* const a
 	int c;
 	unsigned int client_options = DHCPV6_CLIENT_FQDN | DHCPV6_ACCEPT_RECONFIGURE;
 
-	while ((c = getopt(argc, argv, "S::N:V:X:P:FB:c:i:r:Ru:s:kt:m:hedp:fav")) != -1) {
+	while ((c = getopt(argc, argv, "S::N:V:X:P:FB:c:i:r:Ru:s:kt:m:hedp:favQ")) != -1) {
 		switch (c) {
 		case 'S':
 			allow_slaac_only = (optarg) ? atoi(optarg) : -1;
@@ -227,6 +228,10 @@ int main(_unused int argc, char* const a
 			++verbosity;
 			break;
 
+		case 'Q':
+			update_lifetimes = false;
+			break;
+
 		default:
 			help = true;
 			break;
@@ -454,6 +459,7 @@ static int usage(void)
 	"	-k		Don't send a RELEASE when stopping\n"
 	"	-t <seconds>	Maximum timeout for DHCPv6-SOLICIT (120)\n"
 	"	-m <seconds>	Minimum time between accepting updates (30)\n"
+	"	-Q		Do not track or update address lifetimes\n"
 	"\nInvocation options:\n"
 	"	-p <pidfile>	Set pidfile (/var/run/odhcp6c.pid)\n"
 	"	-d		Daemonize\n"
@@ -643,21 +649,24 @@ static void odhcp6c_expire_list(enum odh
 		else if (c->t2 != UINT32_MAX)
 			c->t2 -= elapsed;
 
-		if (c->preferred < elapsed)
-			c->preferred = 0;
-		else if (c->preferred != UINT32_MAX)
-			c->preferred -= elapsed;
-
-		if (c->valid < elapsed)
-			c->valid = 0;
-		else if (c->valid != UINT32_MAX)
-			c->valid -= elapsed;
-
-		if (!c->valid) {
-			odhcp6c_remove_state(state, ((uint8_t*)c) - start, odhcp6c_entry_size(c));
-			start = odhcp6c_get_state(state, &len);
-		} else {
-			c = odhcp6c_next_entry(c);
+		if (update_lifetimes)
+		{
+			if (c->preferred < elapsed)
+				c->preferred = 0;
+			else if (c->preferred != UINT32_MAX)
+				c->preferred -= elapsed;
+
+			if (c->valid < elapsed)
+				c->valid = 0;
+			else if (c->valid != UINT32_MAX)
+				c->valid -= elapsed;
+
+			if (!c->valid) {
+				odhcp6c_remove_state(state, ((uint8_t*)c) - start, odhcp6c_entry_size(c));
+				start = odhcp6c_get_state(state, &len);
+			} else {
+				c = odhcp6c_next_entry(c);
+			}
 		}
 	}
 }
